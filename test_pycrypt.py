#!/usr/bin/env python

from unittest import main, TestCase

from pycrypt import pycrypt


class TestEncryption(TestCase):
    def test_sig1(self):
        plain = b'\x10\xcc;"7\n\x05fused\x10\x95/%\xc0\xb0\xb0Dmi\xfe Bu\xfbL\xdf\xc2\x95\x01#\xbe\xee@\xa5\x01\x81\xf6tC\xad\x01\x00\x00\xa0@\xb5\x01\x00\x00 A\xd0\x01\x03\xe0\x01\x01:\x92\x01\x08\xe4*\x19\x1a\xf0\xdc;>\xd8\xe0?!xY.\x0f\xad/\xed\xbf)\x88S \xa4<\x94\xe8\xbf1L\xb3\r\x9e\xbe\x829@9VaXqPTQ\xc0A\x0fP\x8d\xb8i\xebH\xc0H\x02Q\xdb\x9d\xc3\xbb`\x9e\xef?Y\xf0\x1c\x93\x91\xae\t\xce?a`\x91\xcf\x92\x8a\xae\xdc\xbfi\xa8\'\xb5\xf5\x1e\xab\xd3\xbfq\xb0\x0c\xb6!"&\xd6?y\xf0\x0fi\x8ch`\xe6\xbf\x81\x010\xc0\n^\xd2\xa9\xcc?\x89\x01\xac\xcfY\x90\x02\x13\xe9?\x91\x01\x80\x19,\x8b\xfc.\x90?\x98\x01\x03B\\\n 7d6284ecc86a49dab0878995f709052b"\x05Apple*\x06iPhone:\tiPhone8,4B\x05AppleJ\x05N51APR\tiPhone OSj\x059.3.3J\x02(\x01P\xfd\xf8\xd1\xc8\xf8\xff\xff\xff\xff\x01\xa0\x01\xdd\x93\xe6\xb4\xfe\xff\xff\xff\xff\x01\xb2\x01\x10\x136\xb5\xd5\x94kc\x17{G0\x9c\rb\x82\xf8\xb8\x01\xaa\xf2\xb7\xd9\xb5+\xc2\x01\n\xa4\xd0\x9f\xf9\xe3\xfd\xcd\xe5\xb6\x01\xc8\x01\xa2\xde\x87\xca\x8c\x83\xfc\xfe\x11'
        encrypted = b'\x00oTQ\xc8wdLR\x036\xd9\xd3\xff\x00\xc0\xe4;\x9a\x0b\xe1\x8e\xe9\xe4\xd9g\xee\xf4\xba\xe3\x8eQ\xf7\xab \x05\xfa.\xf4\x9e\x1f\xeb\x1f.\x8d\xb4\x98?d\x8b\xdfw\xce7a\xff\x00\x159$w\x10b\x83q=\x8b310\xc4\xf7\xdb\xd1\x93\x16\xae\xda\x82\xff+\x1f\x9d\x1f \xfe\x98\x8d\xa2\xb1\x1f\x88\xb3YBZ1\xees\xf3\x87\xc5\x10\x85\x1b2\x86\x04\x84=!\x9d\x0c\xe4\x13\xe6_\x8e-@\x02\xa1\xca\xd9M\xa0\xa0nSa\x18\xbc\x88\xf0Wi"\xee\xe3\xe5\xaaS\xffFB\xbfM~I\x96\x91\xb2\r\x97\xcf\xe1\x97L\n\xcf\x82~\x19\x91\xddy\xb2\x04cyOf\xe1^\x98LP\xe3\xfb\xdb\xf6\xd9\xc5/\xf3\xf6\xd8{\x8c|8\x97\xda\x03\xa1\xa8z\xf6T\xd44\xfa\xa0\xeb\x9c\\r\xcd-\x86D\xa4D\xdfy\xcao\xb9\xd0\n|8\x05\xc0\xaf\xfc]\x7fX\x0f\x93\x9d\xa30\xf2\'\xd9L\xa6\x14\xef\xed\x1aT]3/\x87\x8a\xbb\xaf\xe88%2\xda\xc2\xdc\x19zh!\xa2c\x86\xfeL\xf9\xa6\x06\xbe\xe6\x88\xde\xea\xe6:?\xd2\n3\xdc\xa0K\x85\x7fndG&[\xaa54\xc2nr\x94\x16\x1d\x84v\xc14>\x90\xc6\x91.\x83!\x11em\x97\x83\xfd\x977\x18V\x93\xd9\xb0\xa1\xb5gd\x95\xfa\xf1a$\x00\x1fc\xf8oM\xad[\xd3e"v$5\xeb\x9bv}Q\x00mq\x14DM\xc4\xe6M\xa6Q\xc2\xc42Q\xfb}\x7f#\x11\xd1/6\xb5\x97\xbd\xd1\xd6\xcc\xfe\x03\xa5\x8f\xaf \xf5\xf7(y\xe6~\xcd\xe3\xc8;\xb2P\xb7\xc8\xf1\x1d\xf2]\t\xdaj\xa8?\xed/L\xbe\x82i7r\xacn\xc5*\xf5_wR\x85\x12\xdf\x87\xed\x9b\xc81\x00\xe1a\xa0!\xce\x00\xac\xec\xef\xac\xf6^\x0e\x87\xb1\x13\xdc>\x11\xab\x862\xdc\xfaO\xc4\x11\xb78\xe9T\xb0\xd5\xdb\x9a\xc4L"V|\xdd\xd8\xae\x81G\xb7\x99(\xb9\x82!\xd2\x9aJ\xa7\x91\xb8A\x805]\xda\x80\x18\xb9p\n\x02#Br\x1a\xb8\xa6j\xd3(_-%\x99\xb7'
        self.assertEqual(pycrypt(plain, 7628), encrypted)

    def test_sig2(self):
        plain = b'\x10\x86V"7\n\x05fused\x10\xd0J%\xc0\xb0\xb0Dmi\xfe Bu\xfbL\xdf\xc2\x95\x01R\x1e\tA\xa5\x01\xa1\x04 C\xad\x01\x00\x00\x82B\xb5\x01\x86l7A\xd0\x01\x03\xe0\x01\x01:\x92\x01\x08\xfaM\x19\xd3\x93\x15\x1a\x19;\xf7?!t\x14F\xad\xe6N\xd2?)t\xa0\x8f\xb8?|\xd1?1Tmt\xf8\x9e$0@9\x98\xd2\xff\xde\x90ZF\xc0A\x12L\xb3$,\xfd<\xc0H\x01Q\xc4\xce\xee\xd3s\x17\xd7?Y\x10\xc1\xaf1\xe2\xcd\xd5\xbfa\xc0\x15\xed(\xbe\'\xa2?iT\xa7\x17\xbbd\xbe\xe1\xbfq4\xd0\x86\xbcfT\xf2?y\xacUf3\xccL\x00@\x81\x01\x10\xcf6-#\x95\xd1?\x89\x01\xf0\xf5\x12\xd5\x0c\xce\xd7\xbf\x91\x01xL\xac\xba\x03\xc2\xb0?\x98\x01\x03B\\\n 7d6284ecc86a49dab0878995f709052b"\x05Apple*\x06iPhone:\tiPhone8,4B\x05AppleJ\x05N51APR\tiPhone OSj\x059.3.3J\x02(\x01P\xfc\xd6\xbb\x85\x01\xa0\x01\xc2\xd9\xde\xb6\xfc\xff\xff\xff\xff\x01\xb2\x01\x10\x136\xb5\xd5\x94kc\x17{G0\x9c\rb\x82\xf8\xb8\x01\xe4\x8c\xb8\xd9\xb5+\xc2\x01B\x86\xe1\x9f\xec\x80\xbf\xd5\x8f\x94\x01\xf8\xa9\x8d\xe2\xa1\x89\xcc\xefJ\xbc\xc4\xc5\x8b\x88\x8a\xd0\xac\x83\x01\x92\x9c\xd0\xf3\xc6\xe3\xae\x8a\x0b\x84\xcb\xf9\xd4\xd8\xd0\xee\x86\x96\x01\xd0\xce\xee\x84\xc7\xb5\xa7\xd0D\x80\xa1\xfc\x8a\x9d\xdd\xa8\x97]\xc8\x01\xa2\xde\x87\xca\x8c\x83\xfc\xfe\x11'
        encrypted = b"\x00ob\x9b\xdd\x9c\xad\x0b\x1c\x05\x15y\x1a\xd5T\xa9\x05\xd4g\x8f\r\xd6*\xc1#x.s\x1f\xa2\xc8\xb5\x08\xd4\x95*w\xce\xe6\x05\xf1+.8\xba\x97B\x9cN\xe5&\xb0\x86R\x86\xbfg\xdd\xea?\xc9+\xcdtp\x0e\xcf\xc15\xc1\x07q*a\xc5'B\x12\xe9\xb6\xbb\xd4gS\xa0\xcd\xc6\xef\xdf+\xaf\x07\xb1PS\xd3Z\xd5\t\t\xfcG~\xb6\xa8}\xf7\xcd\x96\x08\x85\xb96\xf2<*4m\x95\x19:tj\xef\xad)\xb3~\xd4\xd3\x01\xa1nBp\xa9\xf5\xb2\x1a\x96\xff)]l@\xdbS\xab1\xe1\x93\xad\xf5\x0cP\x82\xf8z\x12m\x94\xe0vs\x01@\xc7 \xa0\x1b_\xf6\xca\xca\xcc\xc5\xb10\xc2:\xfe\xa4\xa4\x8f\xac\xd5@\xe1\xbf\xb4\x91\xc8\x04\xdb*\x9d`@\x8b\xc6\xbf\xcf\xac:\xf4=\xd2\xf2\x97=\x84\x93\n\xc1)\xe6}\x96o\xd0m\x8e%\x89!*A\xd7{\t\xe5@\x82+_\xb8\xabAF\x1b\x88\xb9\xc8\x92K\xfb\xbe\xf3\xef\xa5\x1b\x01\x03\xd6\xc0\x18(\x16\xa3\xf211\xb3\xa8\xbd\xa1)\xa4\xe2;6\xe0W\xd3\xd2A\xedofg\x9a{+ <\x8f\x17^\xda\x05\xe1r\xf3\t\x8bd\x01\t:\xca\xb0\x9b\x12\xd8\x10\xc8%z\xae*`6\xa8\x15;\xd1\x1d\x930\xfe\xb6\xc68(\xbe\xeb\x05\x90\xed\xf3\x95\xb6\xea\x9c\xd9\x84T\xf8pd\x9f\xac\xef\xdf!.\x12:\x1d\xf6\xdf\x8ctA\x80\xc9\xa1$Ji\x86\xb1<\x1d\xd9\xfc\xe6\xd3\x1f&?\xf5\x05z\xee\x06\xd3u\x94\xa4\xb0\\3\xd2u\x0f*\xfc\x13\x900j\xc6.\xc4\xa2X\x0b\xb1\xd8;\xa0\xf4\x82=,'0\x1f\xa8\x18\xa5\x9a\x03\x00\xdaw\x00T\x99\xf5\x1e\x95\xc9W\xf3\xb8v$hH\xe3S\x11\xd4R|E>\xde\xacR\xd7\xd6\xfd~\xb6k|\xcdv\xbbP$\xb0\xf0U\x85\x1d\x88\x15\xea\x8d+\xe5\x9d^\xb1U\xc2\xfa\xbf\x94\xe9\x18/=r-\x0b\xa3\x0e;\xcb\xb7\x89\x95#\xdcB\x0cFRe\xad\xb3<\x08\xc9\xd5c\x99\xf3\xee\xee\xca'\x05U3\xf4\xdb|/\x0e\xd4\xb7"
        self.assertEqual(pycrypt(plain, 11014), encrypted)

    def test_noctem(self):
        encrypted = b'\x00n\xab\xdd%\x19\xee\xcc\xfb\xd9y\xec\x8a\xe9S\xef\xe8nAs\xea8(\x10\x02M_\xab6FM\xea\x9d\x15\xe4+\xe7\xc2\x07\x82|\xcc\n\xe2\xc1\x8e\xb8\xebh\xa8\xa3\n\x87\x9du\xdfCK \x8b\xca\xbe\xc4\x0b\x1c\x8eN\xe7\xee\xa4:!=\x9fC\x9eX\x8e8\x99\xd0\xbe\x95\x8c\xb9\xbe\x9e\xeb\xd5*\xd5\xdf\x0f\xfe\xb7v\x03A\x1b\xda LB\xbd\xba Q2\xbd\xe6;\xea%\xc5\x01\xa4\xe6\x1d]?\xeb<\xf3\x93\x96\x17\xc8\xea\xfb\xf6-\xa2\x06\xf0m\xd0Lqr+\xeb\x92>\\\x92=\xa9\x88E\x1e\xc0m\xf2\x8e\xc5\xbf*Y\x95\xfc\x88\x0c\xb6!t=\xa8|\xfa\xb9b\x87\xd9\x08\x0b\xfa\xdfc\xb5\xdbG\xff\x17H%\x9a/y\xa5G\xc9Fs\x1d\x85\x86\xbaU\rD\xfd\n{E1\xd3\xedx\x0e9\xd7[x2A|(6\x1c\x13\x1e\xb7ZB\xc1j:k\xc4\x1bQ\xdc>H\xc7\xc5\x8cQS\xf7*\xe64\\\x8e\xaf\xe8\x02\x8b\x92\x050\xe5\xe1A\x8bH\xa9\r{\xea'
        self.assertEqual(pycrypt(b'noctem', 123456), encrypted)


if __name__ == '__main__':
    main()
