#!/usr/bin/env python

from unittest import main, TestCase

from pycrypt import pycrypt


class TestEncryption(TestCase):
    def test_sig1(self):
        plain = b'\x10\xcc;"7\n\x05fused\x10\x95/%\xc0\xb0\xb0Dmi\xfe Bu\xfbL\xdf\xc2\x95\x01#\xbe\xee@\xa5\x01\x81\xf6tC\xad\x01\x00\x00\xa0@\xb5\x01\x00\x00 A\xd0\x01\x03\xe0\x01\x01:\x92\x01\x08\xe4*\x19\x1a\xf0\xdc;>\xd8\xe0?!xY.\x0f\xad/\xed\xbf)\x88S \xa4<\x94\xe8\xbf1L\xb3\r\x9e\xbe\x829@9VaXqPTQ\xc0A\x0fP\x8d\xb8i\xebH\xc0H\x02Q\xdb\x9d\xc3\xbb`\x9e\xef?Y\xf0\x1c\x93\x91\xae\t\xce?a`\x91\xcf\x92\x8a\xae\xdc\xbfi\xa8\'\xb5\xf5\x1e\xab\xd3\xbfq\xb0\x0c\xb6!"&\xd6?y\xf0\x0fi\x8ch`\xe6\xbf\x81\x010\xc0\n^\xd2\xa9\xcc?\x89\x01\xac\xcfY\x90\x02\x13\xe9?\x91\x01\x80\x19,\x8b\xfc.\x90?\x98\x01\x03B\\\n 7d6284ecc86a49dab0878995f709052b"\x05Apple*\x06iPhone:\tiPhone8,4B\x05AppleJ\x05N51APR\tiPhone OSj\x059.3.3J\x02(\x01P\xfd\xf8\xd1\xc8\xf8\xff\xff\xff\xff\x01\xa0\x01\xdd\x93\xe6\xb4\xfe\xff\xff\xff\xff\x01\xb2\x01\x10\x136\xb5\xd5\x94kc\x17{G0\x9c\rb\x82\xf8\xb8\x01\xaa\xf2\xb7\xd9\xb5+\xc2\x01\n\xa4\xd0\x9f\xf9\xe3\xfd\xcd\xe5\xb6\x01\xc8\x01\xa2\xde\x87\xca\x8c\x83\xfc\xfe\x11'
        encrypted = b'oI\x80\xd2\xc3\xe5\xc0\x10\xb54\x8f\\\xbd\x17\xbc\xf3\x99\xf4\x92\xf8\xfe\xca\n\x9b\xcb.Z\\C)\xa6v\xc0\x98\x80.\xe4\xdf\xdffr\x03\x02\xe3|\x17]xv\xed\x993\xb6\xa4E\x0b\xec"\xb4>m\xb6\xc6\x18(\xc4\xe0;Q\xcb\x99=\x99\xee\x7f\xdbF\xed\x89\xab|\x0e\x17\xc0p\x827\x87\x85\xe7\\\xee\xe1\x88zF"\xba;\xe5\x8b\xab\xe6\'\xea\x0bL\xcdr\xb1i6\xc1%w\xcc%*l\x04\xa9\xb4}i\xb8\xff\x04-\'\x0b\xd3=\x9b\xdd\xce\xf7\xb3Ed\xb9(\xe9(O\xf0o\xac\xf4\x0eb{Qt\x90H\xc0\xf8b\xb1\xb2u\x9c\x82t\xd6Ec\x1d\xb2\x16d*\\\xee\x1cT\x90\xef\x01,\n\xff\xb4bwu\x9d\x90\xf1\x80\xfe\xd9d\x18\xb8\xce&s\x04yJi\xfd?yY\xf7\x9d\x91\t&\x81e\x14#\x9c\xafo3\xedH\xf7\xf3\\a\x04z\x10,\x7f\xa6(x\x96\xfcC\xbb4\xeey\x1a\xb6\x9b\x1c\xdd\xec\xff\xebN\x0b\x96\xa3v\xb4\x84\x1a\x9b\xa9\xb4\x19\xab\xae\xa3\xa0\x1c\xea!`\xd6\xe8\x0fY\x97g\xc9/\xa1>^\xc1`\x87\x8doq\x13y\xea\xcb@\x17\xce\x1a\x8cD\x17H\xb8\xe1\xef\xba\x9dQ_4)\x80\xcdgrY@p\x8fx\xd7\x13\\\x10J\x85f5)s\x1c\xeaG?\xcfL\xe1\x04\x9d\x0b\xbfO\xcd\xabO\xad:w\xb2\xf9ADSlv%\xaeO\xb0)\xaeV\xb2\xdc\'P\xe5\xb9\xc7#.\xeb\x1d\x0fQ\xd0\xb7\x02h\xc59ok\xd6\xdb\xcfa6\xb6\xa2\x1a*e\xa7W\x81\xc2\xef}5\xad,)\r\tf\xc1\x96\x1fP)\x16~LG\xf8\\\x11~\x92\x07\x8b\x06\x12\x16\xca\xe3\x98H\t\xc2\x84\xf2#\x95\xe2\x84UD5\x1f\xd0\xff\xa1\xc6\x97\xeb\xd4\t\x1d\xcb\xec\xe5\xad\x90zIxiMM\x14\xe5\x11\xe4A\x7fH*\xee]\x05\x18\xf6\xbfzfd}R\xe7\xd8\x84\x8d\xc7&\x90\xd2\n\xc4\x95j\x83\x96\xf3\x88\nt\xdb\xa1\xf7I\xd9\x8e\xf6f8\xee\xc6.7\xfd\x91!\xacQ1\xa1c\xc5\xef#'
        self.assertEqual(pycrypt(plain, 7628), encrypted)

    def test_sig2(self):
        plain = b'\x10\x86V"7\n\x05fused\x10\xd0J%\xc0\xb0\xb0Dmi\xfe Bu\xfbL\xdf\xc2\x95\x01R\x1e\tA\xa5\x01\xa1\x04 C\xad\x01\x00\x00\x82B\xb5\x01\x86l7A\xd0\x01\x03\xe0\x01\x01:\x92\x01\x08\xfaM\x19\xd3\x93\x15\x1a\x19;\xf7?!t\x14F\xad\xe6N\xd2?)t\xa0\x8f\xb8?|\xd1?1Tmt\xf8\x9e$0@9\x98\xd2\xff\xde\x90ZF\xc0A\x12L\xb3$,\xfd<\xc0H\x01Q\xc4\xce\xee\xd3s\x17\xd7?Y\x10\xc1\xaf1\xe2\xcd\xd5\xbfa\xc0\x15\xed(\xbe\'\xa2?iT\xa7\x17\xbbd\xbe\xe1\xbfq4\xd0\x86\xbcfT\xf2?y\xacUf3\xccL\x00@\x81\x01\x10\xcf6-#\x95\xd1?\x89\x01\xf0\xf5\x12\xd5\x0c\xce\xd7\xbf\x91\x01xL\xac\xba\x03\xc2\xb0?\x98\x01\x03B\\\n 7d6284ecc86a49dab0878995f709052b"\x05Apple*\x06iPhone:\tiPhone8,4B\x05AppleJ\x05N51APR\tiPhone OSj\x059.3.3J\x02(\x01P\xfc\xd6\xbb\x85\x01\xa0\x01\xc2\xd9\xde\xb6\xfc\xff\xff\xff\xff\x01\xb2\x01\x10\x136\xb5\xd5\x94kc\x17{G0\x9c\rb\x82\xf8\xb8\x01\xe4\x8c\xb8\xd9\xb5+\xc2\x01B\x86\xe1\x9f\xec\x80\xbf\xd5\x8f\x94\x01\xf8\xa9\x8d\xe2\xa1\x89\xcc\xefJ\xbc\xc4\xc5\x8b\x88\x8a\xd0\xac\x83\x01\x92\x9c\xd0\xf3\xc6\xe3\xae\x8a\x0b\x84\xcb\xf9\xd4\xd8\xd0\xee\x86\x96\x01\xd0\xce\xee\x84\xc7\xb5\xa7\xd0D\x80\xa1\xfc\x8a\x9d\xdd\xa8\x97]\xc8\x01\xa2\xde\x87\xca\x8c\x83\xfc\xfe\x11'
        encrypted = b'oI\xb6\x18\xd6\x0e\tW\xfb2\xac\xfct=\xe8\x9ax\x1bo|\x12\x92\xc9\xbe11\x9a\xdb\xe6h\xe0\x92?\xe75\x01i?\xcd\xfd\x9c\xc33\xf5K4\x87\xdb\\\x83`\xf4\xfe\xc1\xa2K\x8b\xeag%\xd3\x8di\xef)\xf7\xa4\xc9U:Z\xbbh^)\xea\xaa%\xe2\xe2\xec\xc5\xed\x8c\xf0\xb1i\xe5\xf8}\xeca\xe3\x81k\xcfI\x81A\x1f\xf0)\x88\x14YD=\x04`\x84\xcd\x12\xfb3X\x00N\xc9\xd4]\x91a\xdd_Xv\x17=\xa0\xb9\xca }o\xe97d\x19\x9d\xca}\x93\x8ae\xf2\x0b\xb2!v\x15yN\x8c\x0b\xd7\xa3\x97T\xa9\x10c\x02\xed\x96\n|\x169qtt\xbawzH\xddq<8\xcd\x02\x82\xd5\xc2(V\x05\n\xc2HW\x86\xba\xc03\xfb<\xc5\xdbk\xc1\\\xf1\xee\x118W\xa2+\xb2\xe6\xb6+\ns\xb0\xbd@\x8c7YA\xd3\x15\xef\xd2f\xb8\x0fy\xd0\xf5Y\x8dQ\xdc\xc99\x0ev}\xe2I\xda\xcb$n\x9f+\x15"JMGv\xd8qc\x0e\x91\xf2\xbe\xb2k\'\xb5D=\x92\xd5\x87_Hj\xf1\x88vn\xea\xac\xc9 \x06\x04\xc8\xe3\x00\xd0Vc\xad\x16\xdc\xb1\r\x1d;%\xcd8\x8ep\x82\xb3\x1aqc&\xe7\xdb\x18g\xbd\xf7\xd4\x85\xf3X\x17\xace3\xd4\xb1lB\x88\xb3G\xc6(6\xca\x01\xcdX\xe3Z\x96\x86iE\xfdO\xaeKc\x82\xea\xf6\x87s;\x9c\xd8s\xb3\xdbR\xa8\x9b\xf2\xd4\x18>\xe0\\5m\x08\xccS\xd6=\x1d\x8a+\xa3\x93\xa9\xb3\xc3\x06\xc1X\xba lC\xef\xc8NW\x9e\x12\xc7O\x90\xecf\x95\x90\x7fo0\x0c\xeb$\xfb\xd0\r\xd6\xc7\xc3\x10\xb4\xcbt\xea\xe1\xfa\xd7\xf8\xde)c\xb9\x96\xd8zG\xfc\xced\xe1\xac\xcd\x1a\xbe\xd6;\x15\xef0LC\x04\x80V\xec\x1f.\x16\\V;s\xbc\xf6#\x90\x84r9\xe2\x94\xeb|x\xe7D\x95\xd2\xc26\x15=X!\x8b2\x07\xc1x\xf1=-:\x00\x16\x15\xf4g>9\x19\xafQ_\x9au\xab\x1f\x0b\x82\x8f\xc0,\xd2\xf5v\xc2\x82a\xee\xa2#'
        self.assertEqual(pycrypt(plain, 11014), encrypted)

    def test_noctem(self):
        encrypted = b'oH\x7f^.\x8bJ\x90\x1c\xee\xc0i\xe4\x01\xef\xdc\x95\xa1I\x80\xf5|\xcbo\x10\x04\xeb\x03\xcf\x8ce\xcd\xaa&D\x00\xf93,z\x11$\x17/0-}\xacz\xce\xe5N\xff\x0eQ+\xaf|\xad\x91\xd0\x18`\x90Ew%\xef\x8e_g\xeb\x7f\xa0\xafS\xb0\xb93\xcd\x87\xaf\x1fS\xe9\xc21\xe1\xf2|\x96\xb9]/\x8fj\x10\x15S\xcc,"\xb4\x1fK\x19\x9b\xfbKjsA\xe8\x04e\x8e\x9c\xb9\x1c{@)D#cHl\xa9\x8f\x9c\xe6#\x15\xdd\xf4N\xdd\xda\xf5wi(\xe9U \xedH\x02\x02\xea*\x8e\x8b\x89B\x9eEw.\x81\x7f\xee-\xc4\x7f\x01ye+\xd6I\xcbd\xb8\x8f\xe2\x1foO,\xbb\xd9f\x05\xa1\x19j\x92\xd8\xbb\x0f\x08\xcd\x06\x9c\xe0\xe6\xd0]\xe9\x83\x99&\x91\xd4\xd6h(\xb2\xb6\xb5~Y\xf9\x1b*\xe8\xe0\xff\xf4*x\xac\xde\x0f\x92\x1d\x04\xb0kdi\xe5\xee\xc9\xa1\xee)\x1b\x9a\xdf\xbd\xb5\x14\x0ep8nO"<{\xabp\xf7K\x11\xdc\xa0\x18#'
        self.assertEqual(pycrypt(b'noctem', 123456), encrypted)


if __name__ == '__main__':
    main()
