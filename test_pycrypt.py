#!/usr/bin/env python

from unittest import main, TestCase

from pycrypt import pycrypt


class TestEncryption(TestCase):
    def test_sig1(self):
        plain = b'\x10\xcc;"7\n\x05fused\x10\x95/%\xc0\xb0\xb0Dmi\xfe Bu\xfbL\xdf\xc2\x95\x01#\xbe\xee@\xa5\x01\x81\xf6tC\xad\x01\x00\x00\xa0@\xb5\x01\x00\x00 A\xd0\x01\x03\xe0\x01\x01:\x92\x01\x08\xe4*\x19\x1a\xf0\xdc;>\xd8\xe0?!xY.\x0f\xad/\xed\xbf)\x88S \xa4<\x94\xe8\xbf1L\xb3\r\x9e\xbe\x829@9VaXqPTQ\xc0A\x0fP\x8d\xb8i\xebH\xc0H\x02Q\xdb\x9d\xc3\xbb`\x9e\xef?Y\xf0\x1c\x93\x91\xae\t\xce?a`\x91\xcf\x92\x8a\xae\xdc\xbfi\xa8\'\xb5\xf5\x1e\xab\xd3\xbfq\xb0\x0c\xb6!"&\xd6?y\xf0\x0fi\x8ch`\xe6\xbf\x81\x010\xc0\n^\xd2\xa9\xcc?\x89\x01\xac\xcfY\x90\x02\x13\xe9?\x91\x01\x80\x19,\x8b\xfc.\x90?\x98\x01\x03B\\\n 7d6284ecc86a49dab0878995f709052b"\x05Apple*\x06iPhone:\tiPhone8,4B\x05AppleJ\x05N51APR\tiPhone OSj\x059.3.3J\x02(\x01P\xfd\xf8\xd1\xc8\xf8\xff\xff\xff\xff\x01\xa0\x01\xdd\x93\xe6\xb4\xfe\xff\xff\xff\xff\x01\xb2\x01\x10\x136\xb5\xd5\x94kc\x17{G0\x9c\rb\x82\xf8\xb8\x01\xaa\xf2\xb7\xd9\xb5+\xc2\x01\n\xa4\xd0\x9f\xf9\xe3\xfd\xcd\xe5\xb6\x01\xc8\x01\xa2\xde\x87\xca\x8c\x83\xfc\xfe\x11'
        encrypted = b'\x00\x00\x1d\xcc\xd6b\xe3o-\x9b\x99\xcf@\x02\x15i~\xdc\xb2+2Ba\x8f\xcda\xa1\x0f\xe9I\xee\x19\x98\xf3K\xce\x1a\xd0\xfb\xba\xc3ZFj\x04\xccC!=\xc0\xf2\x1c\xe1`\xa5\x1f\x14\xed\xf6f/R\x86\xc3\xaa\xbf\xf0#)HG)\xcf\x87\xfa\x93\xe6z\x15c\xe3\x80\x13\x1b\xfbuo\xd5\xf0\xc4<\xe8\xb5\r\xc7\xe7\x90\\\x95]?q\xca\xa9\x95M\xc0\x88\xc1\x8e\x1e\xea\xd0\xf5\xc3R\xc1jmAGO1\x95\xb1\xa9\xf6\x9c\xe2\xa4\xb7\xd8m\x06\x8c+\xfe\xa3\x05\x84\x97\xec\xfa\x94\x99\xd6\xf4&\x9b\x03\xf09e\x86\xd9p\'\x93\xfb\x85\xb5\xbe;(\x81.\xd9\xbe\xc0\x0bRP\x9b\x99\xef\xbf\xbb\xc8\xdc\x06\xdc\x0f5\xae?\xbe\x13\xf5\xe9d\xdc\xb5\xb6\xd1hx\xcc\x1c;\xeb\xa6\x16\xdf\xc9jOd^\xee\xf9\xb46\xf3I$\xcd>(\x97\xae?O\xbd\x8e}\xe0\xb9\xbc\xf4\xd7;\x00\x8b\xc3\xa7|\xe6\x11\x83y\xef\x18\xb4{:\xd4\x17o\x0e\xfb_!\xba\xe9o1\xe9\xae\x1e\xd0\xa1+\'\xe7\xc1#\x85]\x9bK\x1d\xf4%l\xe1\xce\xdbE\xa9\xfd\x0f\xb3\x94R\xb8\xb6\xcb\xd6{\x96\x8d0\xcb\xe5\xab\x81\xe48\x96j\x01\xcd\x91\xf4\x951\xde\xcf,\xc8\x9b\xd3\xf6\xeb\xf3\x08"\xa6\xcd\xc5\xd9\xcfp\xf5}\xbb\xc0N\x9cYgJ\x8f\x8b\ta&\x06\x86\x80\x94\xea\xb5\xe0$\xf9\x8d"\xea\xf0\xfb\x8f!\x03\xc2\xff\x15\x0exB(\xdej\x11\x12\x03|l\x0c|\x0e\xcf\xa9\x84\xda\xaa\x04\xd6ll{J(\xbb\x82\x8f\xb5j\xf8wY>\x82\xa0>\xc3U\xcb\xb2\x08\xc9^\x82\xe6\xa4\xfd\x0er\xa4\xd7}\xaa\xba\x15\xe9\x12"\xdbq\r\xde>(\xef\xd0\x8b\xccZw\xd3\xab\xd2\x9e\xfa\xbej\x14d\xba\xd5\x13(/\x14\xb1Z\xcf-OS\xd0v\x01h\xaaa\x1e\xd6\xc9\x97\xb7\xe7/_\x9c&\xcb\x1b\xd8\xb4\xcf\xf9\xbd\x8f\x8e\x01>HM\x87\xf7H\xf0\x9b\x13\xf6\xb1A\x88\xb9\xdb\xeb\xa0T\xbaFk\xa2cT\xd2\xbe\x84I\xcd\x91\xbc\xf9\xce\x85\xfa\x83\xeda\'{!'
        self.assertEqual(pycrypt(plain, 7628), encrypted)

    def test_sig2(self):
        plain = b'\x10\x86V"7\n\x05fused\x10\xd0J%\xc0\xb0\xb0Dmi\xfe Bu\xfbL\xdf\xc2\x95\x01R\x1e\tA\xa5\x01\xa1\x04 C\xad\x01\x00\x00\x82B\xb5\x01\x86l7A\xd0\x01\x03\xe0\x01\x01:\x92\x01\x08\xfaM\x19\xd3\x93\x15\x1a\x19;\xf7?!t\x14F\xad\xe6N\xd2?)t\xa0\x8f\xb8?|\xd1?1Tmt\xf8\x9e$0@9\x98\xd2\xff\xde\x90ZF\xc0A\x12L\xb3$,\xfd<\xc0H\x01Q\xc4\xce\xee\xd3s\x17\xd7?Y\x10\xc1\xaf1\xe2\xcd\xd5\xbfa\xc0\x15\xed(\xbe\'\xa2?iT\xa7\x17\xbbd\xbe\xe1\xbfq4\xd0\x86\xbcfT\xf2?y\xacUf3\xccL\x00@\x81\x01\x10\xcf6-#\x95\xd1?\x89\x01\xf0\xf5\x12\xd5\x0c\xce\xd7\xbf\x91\x01xL\xac\xba\x03\xc2\xb0?\x98\x01\x03B\\\n 7d6284ecc86a49dab0878995f709052b"\x05Apple*\x06iPhone:\tiPhone8,4B\x05AppleJ\x05N51APR\tiPhone OSj\x059.3.3J\x02(\x01P\xfc\xd6\xbb\x85\x01\xa0\x01\xc2\xd9\xde\xb6\xfc\xff\xff\xff\xff\x01\xb2\x01\x10\x136\xb5\xd5\x94kc\x17{G0\x9c\rb\x82\xf8\xb8\x01\xe4\x8c\xb8\xd9\xb5+\xc2\x01B\x86\xe1\x9f\xec\x80\xbf\xd5\x8f\x94\x01\xf8\xa9\x8d\xe2\xa1\x89\xcc\xefJ\xbc\xc4\xc5\x8b\x88\x8a\xd0\xac\x83\x01\x92\x9c\xd0\xf3\xc6\xe3\xae\x8a\x0b\x84\xcb\xf9\xd4\xd8\xd0\xee\x86\x96\x01\xd0\xce\xee\x84\xc7\xb5\xa7\xd0D\x80\xa1\xfc\x8a\x9d\xdd\xa8\x97]\xc8\x01\xa2\xde\x87\xca\x8c\x83\xfc\xfe\x11'
        encrypted = b'\x00\x00+\x06\xc3\x89*(c\x9d\xbao\x89(A\x00\x9f3O\xaf\xde\x1a\xa2\xaa7~a\x88L\x08\xa8\xfdg\x8c\xfe\xe1\x970\xe9!-\x9aw|3\xef\x99\x82\x17\xae\x0b\xdb\xa9\x05B_s%%}\x91i)4\xab\x8c\xb4\xd1-\xb9\x84\xaf>7\xac\xa2\n\xb2~*sK\xe9W{F1\xb7\x8d^\x8cg\xb7\x04\xd6n\xfbg\xef\xa7D\xf3\xa4\x9a&\x02\xb1A\xd3\xbb\xba\xce\xea\xe3\xec\x9e\xaa\x89\xd5\x18\x7f\x9a\x91\xa3Q \xe5\x8ce\x16\xae\xc5\x8b\xb4\xab\xeb)\xff\xfc\xf7\xc2\x96X\xbe\x9b\xb2\xea\xf3\xe3t\xf2&\x9d\x1dF\x13H\xa5\xe3\'\xa3 T\xca]\x17\xac\x9a\x03iB\xc0\xb0\r\xbb6Z\x1b\xe5\xe7\xd4rT\x0e`\x9d\x8bo\xda\xacu\xeah\t\xe3M\xd6\xaa\xe4\xf9-#\xd3\x18\x02.\xc4aTBt\x01\xbdWt\xe1,\x07(t.\xf9\x9d\xc7\xf36\xa5\x14\xd7\xd1M\xdd\xaa\xd8\n\xe3\x94\x1ccv\x88Lf\xbd,\x1c\x86\x1bk\xe5\xeb\xc8\x81\x1a\x9d\xf3\x03d\xa4X\xf8;6,\xfa|\xe0\x00\xdfv\x95\xf2\xfaa\xd9i\x0c\x15\x1d\x90\xa6\x14\x1f9\x01F\xb2\xec\xe6\xb57\xe8\r\xd8\xe2\x8b\x97\xa5\xba\xbd5 B\x18\xbbi=$\xaca\xda\xf4;\x93_Z\xc2\xa2\xca#9\x9a\x91mb\xe5\xa2\xba\xe4P\x03\x9dA\x17\xcf\x86\x8a\x91\xbbIP\x95?\x1ds\xf3\xaa\xf3lpYRU/3"\xf0g\xf6\xcd\xe3\xc9\x07\xce\x0f\xcd\xcbDn%\x12+}\xd1\x02\x19@\x1e)\x1e\x07\xe8\x18\xccx/\xbfc\x1c\xcf\x10\xb2:C\x19\xa96rSg:\x0fk\x96\xc4\xd8\xf3(\x13@\x88 l\xa8k\xa1b\xa9\x89\xfa\xee\nHy\xf0*\xf1>\x8c<\x0e\xaa\x05\xdaj\xd9\t\x81\xa5\xc5\xbf\xd6\x14-\xe0\xd2\'H\xb4/\xb5\x11o]\xb1\x17y\x8f.Pf\x1c\x15L\x90\xef%\x7fV\xec\xf1\n\x0b0\xea\xf3\xdb\x94\xe1\xcb\xe3\xdf\xe3\xe9&^\xf6\xf8\x1e\\F\x15\xb3\xb1"\xa8\x8d*\xb28\xc1-u\x84a)\x81D=\xdc\xddp\xcec\x0c6!'
        self.assertEqual(pycrypt(plain, 11014), encrypted)

    def test_noctem(self):
        encrypted = b"\x00\x01\xe2@;\x0ci\xef\x84A\xd6\xfa\x19\x14FFr\x89iS9\xf4\xa0{\x16K\x10Pe\xec-\xa2\xf2M\x8f\xe0\x07<\x08\xa6\xa0}S\xa6H\xf6c\xf51\xe3\x8ea\xa8\xca\xb1?W\xb3\xef\xc9\x92\xfc K\xc7\x0c5\xf7\xf6\xdc\xb9\xff)\xc9*\x1b\x10.\xaf\x05\x18!\x1b\x88b5i\xb3\x87_\xf6\xbf\t\xaa2\xcb\xa2\xf3\xfdt\x98\xf8\x98\x914_\x17\xbe\xf8U\x04\x9d\xf9\xd4\xd1\x10x\xf9\x1d>\xae\xd2\x08\xdfj\x1e\x9e\x18J3\x82\xc6\xe3\x06\xb6\x92\x90<\x94J\xd6-;\x8eIT\x10\xd0\x97\x8b\xa1\xe6\x9a\x9f\xd3.\x9a\x86d\xb6\xbf\xcc\x94\x98(j\xc3\xc6Y\xcb\x7f\xb1\xa3\xcf|\t4H\x92\x06m)\xe7\xc9\xe9\xd2\xe4\xf7\xc0_-d\x1f\xcfLV\x0c\xbfb{o\xe6\x04g\xc7\xc0\xfb\xeb\xcdF'\xc9\xcf\xa4\x1c{y\xa7[\xb7]\xc0\xe2\x0c\x13v\xde\xa8h\xc3\xf9A\x16\xbb\x92\x9e\xb3\x0cv\x9a*\x13\x9as\xe9H\xd0\xea\x0f\xd2\xf5\xf9g-\x1c`c\xdb\n\xd1!"
        self.assertEqual(pycrypt(b'noctem', 123456), encrypted)


if __name__ == '__main__':
    main()
